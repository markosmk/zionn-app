// When change schema
// 1- npx prisma generate
// 2- npx prisma migrate reset // to reset all data and add new changes in schema
// 2- npx prisma db push

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

enum UserRole {
  ADMIN
  MODERATOR
  USER
}

enum TypeEmail {
  FORGET_PASSWORD
  VERIFY_ACCOUNT
}

model User {
  id              String    @id @default(auto()) @map("_id") @db.ObjectId
  name            String?
  username        String?   @unique
  email           String?   @unique
  emailVerified   DateTime?
  password        String?
  token           String?
  image           String?
  bio             String?
  role            UserRole  @default(USER)
  activity        String?
  social          String?
  followingIds    String[]  @db.ObjectId
  hasNotification Boolean?

  accounts      Account[]
  sessions      Session[]
  albums        Album[]
  comments      Comment[]
  notifications Notification[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Album {
  id         String   @id @default(auto()) @map("_id") @db.ObjectId
  title      String?
  slug       String?  @unique
  body       String
  image      String?
  type       String?  @default("album")
  genres     String[] @db.ObjectId
  deejay     String[] @db.ObjectId
  media      String?
  share      String[]
  url        String[]
  year       Int?
  isGroMix   Boolean?
  isFeatured Boolean?
  status     String?
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
  userId     String   @db.ObjectId
  likedIds   String[] @db.ObjectId

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  comments Comment[]
}

model Comment {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  body      String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  userId    String   @db.ObjectId
  albumId   String   @db.ObjectId

  user  User  @relation(fields: [userId], references: [id], onDelete: Cascade)
  album Album @relation(fields: [albumId], references: [id], onDelete: Cascade)
}

model Notification {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  body      String
  userId    String   @db.ObjectId
  createdAt DateTime @default(now())

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model Account {
  id                String  @id @default(auto()) @map("_id") @db.ObjectId
  userId            String  @db.ObjectId
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.String
  access_token      String? @db.String
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.String
  session_state     String?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(auto()) @map("_id") @db.ObjectId
  sessionToken String   @unique
  userId       String   @db.ObjectId
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

// Used for forget password and verify email account
model VerificationToken {
  id         String    @id @default(auto()) @map("_id") @db.ObjectId
  identifier String
  type       TypeEmail
  token      String
  expires    DateTime

  @@unique([identifier, token])
}
